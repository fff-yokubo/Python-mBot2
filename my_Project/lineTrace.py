# generated by mBlock5 for CyberPi
# codes make you happy

import mbuild, mbot2, cyberpi, event, mbuild, time
# initialize variables
Base = 20
Diff = 10

# ライントレースを行うための準備
# Quad RGBセンサーをR1に接続
cyberpi.display.show_label("Aボタン", 24, "top_mid", index= 0)

# Aボタンを押したときに実行される関数
# ライントレースを行う関数
# Base: 基本速度, Diff: 差分速度
# ライントレースの方向は、左側のセンサーがラインを検知した場合は左に進み、背景を検知した場合は前進
# それ以外は停止する
@event.is_press('a')
def linetrace(Base=30, Diff=20):
    while True:
      cyberpi.display.show_label("          ", 16, "center", index= 1)
      if (mbuild.quad_rgb_sensor.is_background("R1",1)):
        cyberpi.display.show_label("BackGround", 16, "center", index= 1)
        mbot2_go(Base, Diff, True)
      elif (mbuild.quad_rgb_sensor.is_line("R1",1)):
        cyberpi.display.show_label("Line    ", 16, "center", index= 1)
        mbot2_go(Base, Diff, False)
      else:
        mbot2_go(Base, 0, False)
      time.sleep(0.2)

# mbot2を左右に動かす関数
# Base: 基本速度, Diff: 差分速度
# left: Trueなら左に進む、Falseなら右に進む
# 左に進む場合は、EM1の速度をBase + Diff、EM2の速度をBase - Diffに設定
# 右に進む場合は、EM1の速度を-(Base - Diff)、EM2の速度を-(Base + Diff)に設定
def mbot2_go(Base, Diff, left=True):
    if left:
        mbot2.EM_set_speed((Base + Diff),"EM1")
        mbot2.EM_set_speed((Base - Diff),"EM2")
    else:
        mbot2.EM_set_speed(-1 * ((Base - Diff)),"EM1")
        mbot2.EM_set_speed(-1 * ((Base + Diff)),"EM2")
